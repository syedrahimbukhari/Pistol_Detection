# -*- coding: utf-8 -*-
"""train-yolo11-object-detection-on-custom-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnj2j9FyxT4wEspzUEimAsLj8b0iISHb

<h2>Project Table of Contents</h2>
<table border="1" cellpadding="10" cellspacing="0" style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
  <thead style="background-color: #f2f2f2;">
    <tr>
      <th>Step No.</th>
      <th>Description</th>
      <th>Command / Action</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>GPU Check (Optional)</td>
      <td><code>!nvidia-smi</code></td>
    </tr>
    <tr>
      <td>2</td>
      <td>Set Current Directory</td>
      <td><code>os.getcwd()</code></td>
    </tr>
    <tr>
      <td>3</td>
      <td>Install Required Libraries</td>
      <td><code>pip install ultralytics supervision roboflow</code></td>
    </tr>
    <tr>
      <td>4</td>
      <td>Download Dataset from Roboflow</td>
      <td>Use Roboflow API</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Train YOLO Model</td>
      <td><code>yolo task=detect mode=train</code></td>
    </tr>
    <tr>
      <td>6</td>
      <td>Validate Training Outputs</td>
      <td>Analyze results and confusion matrix</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Predict Using Trained Model</td>
      <td>Generate and visualize predictions</td>
    </tr>
  </tbody>
</table>

### Before you start

Let's make sure that we have access to GPU. We can use `nvidia-smi` command to do that. In case of any problems navigate to `Edit` -> `Notebook settings` -> `Hardware accelerator`, set it to `GPU`, and then click `Save`.
"""

!nvidia-smi

"""**NOTE:** To make it easier for us to manage datasets, images and models we create a `HOME` constant."""

import os
HOME = os.getcwd()
print(HOME)

"""## Install YOLO11 via Ultralytics"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install "ultralytics<=8.3.40" supervision roboflow
import ultralytics
ultralytics.checks()

"""## Fine-tune YOLO11 on custom dataset

<p><strong>NOTE:</strong> In this project, we are training a YOLOv11 model for pistol detection. Make sure your dataset is downloaded and located properly. We have used our custom dataset <strong>"pistol_deduction"</strong> from Roboflow. While downloading, ensure that you select the <code>yolov11</code> export format. By default, the dataset is placed in the <code>datasets</code> directory. If you want to change the default dataset location, you can modify it through Ultralytics' <code>settings.json</code> file.</p>

<div class="short-note">
  <p><strong>Dataset Source:</strong> Custom "pistol_deduction" from Roboflow</p>
  <p><strong>Format:</strong> YOLOv11 (select during export)</p>
  <p><strong>Default Location:</strong> <code>./datasets/</code></p>
  <p><strong>Note:</strong> Modify path in <code>settings.json</code> if needed</p>
</div>
"""

# Commented out IPython magic to ensure Python compatibility.
!mkdir {HOME}/datasets
# %cd {HOME}/datasets
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="U6Df9a4lOjPxysxGeLdS")
project = rf.workspace("syed-abdul-raheem").project("pistol_deduction")
version = project.version(2)
dataset = version.download("yolov11")

"""## Custom Training"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolo11s.pt data={dataset.location}/data.yaml epochs=20 imgsz=640 plots=True

"""**NOTE:** The results of the completed training are saved in `{HOME}/runs/detect/train/`. Let's examine them."""

!ls {HOME}/runs/detect/train/

# from IPython.display import Image as IPyImage

# IPyImage(filename=f'{HOME}/runs/detect/train/confusion_matrix.png', width=600)

from IPython.display import Image as IPyImage, display
import os

image_path = f'{HOME}/runs/detect/train/confusion_matrix.png'

if os.path.exists(image_path):
    display(IPyImage(filename=image_path))
else:
    print("Confusion matrix image not found.")

from IPython.display import Image as IPyImage

IPyImage(filename=f'{HOME}/runs/detect/train/results.png', width=600)

from IPython.display import Image as IPyImage

IPyImage(filename=f'{HOME}/runs/detect/train/val_batch0_pred.jpg', width=600)

"""## Validate fine-tuned model"""

!yolo task=detect mode=val model={HOME}/runs/detect/train/weights/best.pt data={dataset.location}/data.yaml

"""## Inference with custom model"""

!yolo task=detect mode=predict model={HOME}/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

"""**NOTE:** Let's take a look at few results."""

import glob
import os
from IPython.display import Image as IPyImage, display

latest_folder = max(glob.glob(f'{HOME}/runs/detect/predict*/'), key=os.path.getmtime)
for img in glob.glob(f'{latest_folder}/*.jpg')[:5]:
    display(IPyImage(filename=img, width=600))
    print("\n")